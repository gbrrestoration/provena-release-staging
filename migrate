#!/usr/bin/env bash
# This script was generated by bashly 0.9.5 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
migrate_usage() {
  if [[ -n $long_usage ]]; then
    printf "migrate - This CLI tool provides a set of migrations which are shell wrappers of automated migration processes.\n"
    echo

  else
    printf "migrate - This CLI tool provides a set of migrations which are shell wrappers of automated migration processes.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  migrate COMMAND\n"
  printf "  migrate [COMMAND] --help | -h\n"
  printf "  migrate --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Performs an example migration (which does not modify anything)\n" "example-migration"
  printf "  %s   CAUTION: Clears all items from the registry and graph store for a given stage. This does not allow PROD by default. You will need to manually clear PROD. This is a migration used when other forms of migration are too time intensive for test items (usually when manual intervention required).\n" "clear-app-stage  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
migrate_example_migration_usage() {
  if [[ -n $long_usage ]]; then
    printf "migrate example-migration - Performs an example migration (which does not modify anything)\n"
    echo

  else
    printf "migrate example-migration - Performs an example migration (which does not modify anything)\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  migrate example-migration STAGE [OPTIONS]\n"
  printf "  migrate example-migration --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--apply"
    printf "    Apply the changes - do not run in dry run mode.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--reuse_venv"
    printf "    Don't rebuild the python virtual environments\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "STAGE"
    printf "    The application stage to target\n"
    printf "    Allowed: TEST, DEV, STAGE, PROD\n"
    echo

  fi
}

# :command.usage
migrate_clear_app_stage_usage() {
  if [[ -n $long_usage ]]; then
    printf "migrate clear-app-stage - CAUTION: Clears all items from the registry and graph store for a given stage. This does not allow PROD by default. You will need to manually clear PROD. This is a migration used when other forms of migration are too time intensive for test items (usually when manual intervention required).\n"
    echo

  else
    printf "migrate clear-app-stage - CAUTION: Clears all items from the registry and graph store for a given stage. This does not allow PROD by default. You will need to manually clear PROD. This is a migration used when other forms of migration are too time intensive for test items (usually when manual intervention required).\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  migrate clear-app-stage STAGE [OPTIONS]\n"
  printf "  migrate clear-app-stage --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--reuse_venv"
    printf "    Don't rebuild the python virtual environments\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "STAGE"
    printf "    The application stage to target\n"
    printf "    Allowed: TEST, DEV, STAGE\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
migrate_example_migration_command() {
  # src/example_migration_command.sh
  function venv() {
      # function to setup python venv
      if [[ ! $reuse_venv ]]; then
          echo "Setting up venv"

          # clear any existing venv
          rm -rf .venv

          # create new and install requirements
          python3.10 -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
      else
          echo "Reusing existing virtual environment"
          source .venv/bin/activate
      fi

  }

  # Constants
  pre_migration_prefix="example_pre"
  post_migration_prefix="example_post"

  apply=${args[--apply]}
  stage=${args[stage]}
  reuse_venv=${args[--reuse_venv]}

  # generate the apply part of argument if supplied
  apply_arg=""
  if [[ $apply ]]; then
      echo "Changes will be applied since --apply flag was specified"
      apply_arg="--apply"
  fi

  # save starting point
  current_dir=$(pwd)

  # Step one  - export registry

  echo "Moving to export tooling"
  cd admin-tooling/registry

  # setup venv
  venv

  echo "Running export, you may need to sign in"

  export_output_name="dumps/${pre_migration_prefix}_${stage}.json"
  migration_output_name="dumps/${post_migration_prefix}_${stage}.json"

  python import_export.py export-items ${stage} --output ${export_output_name}

  echo "Export completed"

  # Step two - migrate the items (uses migrations script in admin tooling)
  cd ${current_dir}

  echo "Moving to migration tooling"
  cd admin-tooling/registry

  echo "Venv already setup here"

  echo "Running migration"
  python import_export.py modifiers example-migration ${export_output_name} ${migration_output_name}

  echo "Migration completed locally - running import to registry"

  # Step three - import the items
  cd ${current_dir}

  echo "Moving to import tooling"
  cd admin-tooling/registry

  echo "Venv already setup here"

  echo "Running import"
  python import_export.py import-items ${stage} ${migration_output_name} SYNC_ADD_OR_OVERWRITE ${apply_arg}

  echo "Process completed"

}

# :command.function
migrate_clear_app_stage_command() {
  # src/clear_app_stage_command.sh
  function venv() {
    # function to setup python venv
    if [[ ! $reuse_venv ]]; then
      echo "Setting up venv"

      # clear any existing venv
      rm -rf .venv

      # create new and install requirements
      python3.10 -m venv .venv
      source .venv/bin/activate
      pip install -r requirements.txt
    else
      echo "Reusing existing virtual environment"
      source .venv/bin/activate
    fi

  }

  function confirm {
    read -p "Are you sure you want to continue? (y/n) " answer
    if [ "$answer" != "y" ]; then
      echo "Aborted."
      return 1
    fi
  }

  # constants
  empty_json_path="dumps/empty.json"
  backup_path="dumps/${stage}/clear-app-stage-backup.json"

  stage=${args[stage]}
  reuse_venv=${args[--reuse_venv]}

  # save starting point
  current_dir=$(pwd)

  # Step one  - import empty into registry and apply

  echo "Moving to import/export tooling"
  cd admin-tooling/registry

  # setup venv
  venv

  echo "Creating empty json"
  echo "[]" >${empty_json_path}

  echo "Making a backup in ${backup_path} just in case!"
  python import_export.py export-items ${stage} --output ${backup_path}

  echo "About to clear ${stage}"
  confirm || exit 1

  echo "Running clear without apply, you may need to sign in"
  python import_export.py import-items ${stage} ${empty_json_path} SYNC_DELETION_ALLOWED --allow-deletion

  echo "About to apply clear on ${stage}"
  confirm || exit 1

  echo "Running clear with apply!"
  python import_export.py import-items ${stage} ${empty_json_path} SYNC_DELETION_ALLOWED --apply --allow-deletion

  echo "Import completed"

  # Step two - clear graph
  cd ${current_dir}

  echo "Moving to graph tooling"
  cd admin-tooling/prov-store

  # setup venv
  venv

  echo "About to clear graph on stage: ${stage}"
  confirm || exit 1

  echo "Running graph clear op"
  python graph_admin.py ${stage}

  echo "Graph clear completed"

  echo "Depending on usage of this stage, you may need to clear the user link service as well"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        migrate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    example-migration)
      action="example-migration"
      shift
      migrate_example_migration_parse_requirements "$@"
      shift $#
      ;;

    clear-app-stage)
      action="clear-app-stage"
      shift
      migrate_clear_app_stage_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      migrate_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
migrate_example_migration_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        migrate_example_migration_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="example-migration"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --apply)

        # :flag.case_no_arg
        args['--apply']=1
        shift
        ;;

      # :flag.case
      --reuse_venv)

        # :flag.case_no_arg
        args['--reuse_venv']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['stage']+x} ]]; then

          args['stage']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['stage']+x} ]]; then
    printf "missing required argument: STAGE\nusage: migrate example-migration STAGE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ! ${args['stage']} =~ ^(TEST|DEV|STAGE|PROD)$ ]]; then
    printf "%s\n" "stage must be one of: TEST, DEV, STAGE, PROD" >&2
    exit 1
  fi

}

# :command.parse_requirements
migrate_clear_app_stage_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        migrate_clear_app_stage_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="clear-app-stage"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --reuse_venv)

        # :flag.case_no_arg
        args['--reuse_venv']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['stage']+x} ]]; then

          args['stage']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['stage']+x} ]]; then
    printf "missing required argument: STAGE\nusage: migrate clear-app-stage STAGE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ! ${args['stage']} =~ ^(TEST|DEV|STAGE)$ ]]; then
    printf "%s\n" "stage must be one of: TEST, DEV, STAGE" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "example-migration")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        migrate_example_migration_usage
      else
        migrate_example_migration_command
      fi
      ;;

    "clear-app-stage")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        migrate_clear_app_stage_usage
      else
        migrate_clear_app_stage_command
      fi
      ;;

  esac
}

initialize
run "$@"
